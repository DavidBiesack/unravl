package com.sas.unravl.ui;

import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sas.unravl.UnRAVLRuntime;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.Reader;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;

import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JTextArea;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Document;
import javax.swing.text.Highlighter;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;

/**
 * A basic user interface for running an UnRAVL script.
 *
 * @author David.Biesack@sas.com
 */
public class UnRAVLFrame extends JFrame implements PropertyChangeListener {

    private static final String SCRIPT_SOURCE_PREFERENCE_KEY = "unravl.script.source";
    private static final long serialVersionUID = 1L;
    private final UndoManager undoManager;
    private static final int SOURCE_TAB = 0;
    private static final int OUTPUT_TAB = 1;
    ResourceBundle resources = ResourceBundle.getBundle("com/sas/unravl/ui/Resources");
    Preferences prefs = Preferences.userNodeForPackage(this.getClass());

    /**
     * Creates new form UnRAVLFrame
     */
    public UnRAVLFrame() {
        undoManager = new UndoManager();
        initComponents();
        postInitComponents();
    }

    // Additional initialization done after initComponents();
    private void postInitComponents() {
        tabs.setSelectedIndex(SOURCE_TAB);
        varName.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                updateVarTab();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                updateVarTab();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateVarTab();
            }
        });
        jsonSourceTextArea.getDocument().addUndoableEditListener(new MyUndoableEditListener());
        reset();
    }

    private class MyUndoableEditListener
            implements UndoableEditListener {

        @Override
        public void undoableEditHappened(UndoableEditEvent e) {
            undoManager.addEdit(e.getEdit());
            //undoAction.updateUndoState();
            //redoAction.updateRedoState();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        run = new javax.swing.JButton();
        status = new javax.swing.JLabel();
        reset = new javax.swing.JButton();
        jumpToError = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        tabs = new javax.swing.JTabbedPane();
        sourcePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jsonSourceTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        varPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        varNames = new javax.swing.JList<>();
        varName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        showAll = new javax.swing.JCheckBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        variableBinding = new javax.swing.JTextArea();
        position = new javax.swing.JLabel();

        setTitle("UnRAVL");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/sas/unravl/ui/Resources"); // NOI18N
        jLabel1.setText(bundle.getString("UNRAVL_RUNNER.txt")); // NOI18N

        run.setText(bundle.getString("RUN.txt")); // NOI18N
        run.setToolTipText(bundle.getString("RUN_TOOLTIP.txt")); // NOI18N
        run.setEnabled(false);
        run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onRun(evt);
            }
        });

        status.setToolTipText(bundle.getString("STATUS_TOOLTIP.txt")); // NOI18N

        reset.setText(bundle.getString("RESET.txt")); // NOI18N
        reset.setToolTipText(bundle.getString("RESET_TOOLTIP.txt")); // NOI18N
        reset.setEnabled(false);
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onReset(evt);
            }
        });

        jumpToError.setText(bundle.getString("TEXT_ARROW.txt")); // NOI18N
        jumpToError.setToolTipText(bundle.getString("MOVE_CURSOR_TOOLTIP.txt")); // NOI18N
        jumpToError.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jumpToErrorActionPerformed(evt);
            }
        });

        cancel.setText(bundle.getString("CANCEL.txt")); // NOI18N
        cancel.setToolTipText(bundle.getString("CANCEL_TOOLTIP.txt")); // NOI18N
        cancel.setEnabled(false);
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onCancel(evt);
            }
        });

        jsonSourceTextArea.setColumns(20);
        jsonSourceTextArea.setRows(5);
        jsonSourceTextArea.setToolTipText(bundle.getString("SOURCE_TOOLTIP.txt")); // NOI18N
        jsonSourceTextArea.setInputVerifier(new InputVerifier() {public boolean verify(JComponent input) { return onSourceChange(); }});
        jsonSourceTextArea.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                onPositionChange(evt);
            }
        });
        jScrollPane1.setViewportView(jsonSourceTextArea);

        javax.swing.GroupLayout sourcePanelLayout = new javax.swing.GroupLayout(sourcePanel);
        sourcePanel.setLayout(sourcePanelLayout);
        sourcePanelLayout.setHorizontalGroup(
            sourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 23, Short.MAX_VALUE)
            .addGroup(sourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 907, Short.MAX_VALUE))
        );
        sourcePanelLayout.setVerticalGroup(
            sourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 379, Short.MAX_VALUE)
            .addGroup(sourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE))
        );

        tabs.addTab(bundle.getString("SOURCE.txt"), sourcePanel); // NOI18N

        outputTextArea.setColumns(20);
        outputTextArea.setRows(5);
        outputTextArea.setToolTipText(bundle.getString("OUTPUT_TOOLTIP.txt")); // NOI18N
        jScrollPane2.setViewportView(outputTextArea);

        tabs.addTab(bundle.getString("OUTPUT.txt"), jScrollPane2); // NOI18N

        varNames.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "name", "jsonResponse" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        varNames.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        varNames.setToolTipText(bundle.getString("SELECT_VAR.txt")); // NOI18N
        varNames.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                onVarNamesValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(varNames);

        varName.setToolTipText(bundle.getString("MATCH_TOOLTIP.txt")); // NOI18N
        varName.setActionCommand("null");
        varName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onVarNameChange(evt);
            }
        });

        jLabel3.setLabelFor(varName);
        jLabel3.setText(bundle.getString("SEARCH.txt")); // NOI18N

        showAll.setSelected(true);
        showAll.setText(bundle.getString("SHOW_ALL.txt")); // NOI18N
        showAll.setToolTipText(bundle.getString("SHOW_ALL_TOOLTIP.txt")); // NOI18N
        showAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onToggleShowAll(evt);
            }
        });

        variableBinding.setColumns(20);
        variableBinding.setRows(5);
        jScrollPane4.setViewportView(variableBinding);

        javax.swing.GroupLayout varPanelLayout = new javax.swing.GroupLayout(varPanel);
        varPanel.setLayout(varPanelLayout);
        varPanelLayout.setHorizontalGroup(
            varPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, varPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(varPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, varPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(varName, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(showAll)
                        .addGap(0, 385, Short.MAX_VALUE)))
                .addContainerGap())
        );
        varPanelLayout.setVerticalGroup(
            varPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, varPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(varPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(varName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(showAll))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabs.addTab(bundle.getString("VARIABLES.txt"), varPanel); // NOI18N

        position.setForeground(new java.awt.Color(64, 64, 64));
        position.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        position.setText("null");
        position.setToolTipText(bundle.getString("POSITION_TOOLTIP.txt")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jumpToError, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 795, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(run)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(reset)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabs)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(870, Short.MAX_VALUE)
                    .addComponent(position, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(run)
                    .addComponent(cancel)
                    .addComponent(reset))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(status)
                    .addComponent(jumpToError))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGap(481, 481, 481)
                    .addComponent(position, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        tabs.getAccessibleContext().setAccessibleName(bundle.getString("VARIABLE.txt")); // NOI18N

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private UnRAVLRuntime runtime;

    private void reset() {
        runtime = new UnRAVLRuntime();
        changedVars = new LinkedHashMap<String, Object>();
        runtime.addPropertyChangeListener(this);
        updateVarTab();
    }

    private void onRun(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onRun
        outputTextArea.setText(""); //NOI18N
        tabs.setSelectedIndex(OUTPUT_TAB);
        new Thread(new Runnable() {
            @Override
            public void run() {
                runScript();
            }
        }).start();
    }

    /**
     * Enable/disable buttons and other controls based on whether a script is
     * running or not
     *
     * @param running true if a script is running
     */
    public void enableControlsForRunState(final boolean running) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                cancel.setEnabled(running);
                run.setEnabled(!running);
                reset.setEnabled(!running);
                varNames.setEnabled(!running);
                showAll.setEnabled(!running);
            }
        });
    }

    public void runScript() {
        setStatusText(resources.getString("RUNNING_TOOLTIP.txt"));
        enableControlsForRunState(true);
        changedVars = new LinkedHashMap<String, Object>();
        boolean noStatus = false;
        try {
            if (runtime == null) {
                runtime = new UnRAVLRuntime();
            }
            PrintStream out = System.out, err = System.err;
            try (PrintStream output = new PrintStream(new TextAreaOutputStream(outputTextArea))) {
                System.setOut(output);
                System.setErr(output);
                runtime.execute(unravlScript);
            } catch (Throwable t) {
                setStatusText(t.getMessage());
                System.err.println(t.getMessage());
;                noStatus = true;
            } finally {
                runtime.report();
                System.setOut(out);
                System.setErr(err);
            }
        } finally {
            if ( ! noStatus )
               setStatusText(resources.getString("RUNNING_DONE_TOOLTIP.txt"));
            enableControlsForRunState(false);
            updateVarTab();
        }

    }//GEN-LAST:event_onRun

    private void onVarNameChange(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onVarNameChange
        updateVarTab();
    }//GEN-LAST:event_onVarNameChange

    // update the cursr position indicator
    private void onPositionChange(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_onPositionChange
        try {
            JTextArea editArea = (JTextArea) evt.getSource();
            int caretpos = editArea.getCaretPosition();
            int l = editArea.getLineOfOffset(caretpos);
            int c = caretpos - editArea.getLineStartOffset(l);
            String pos = (l + 1) + "," + (c + 1); //NOI18N //NOI18N //NOI18N //NOI18N //NOI18N
            position.setText(pos);

        } catch (BadLocationException ex) {
            Logger.getLogger(UnRAVLFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_onPositionChange

    private void jumpToErrorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jumpToErrorActionPerformed
        try {
            int pos = jsonSourceTextArea.getLineStartOffset(errLine) + errCol;
            jsonSourceTextArea.setCaretPosition(pos);

        } catch (BadLocationException ex) {
            Logger.getLogger(UnRAVLFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jumpToErrorActionPerformed

    private void onCancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCancel
        if (runtime != null) {
            runtime.cancel();
        }
        cancel.setEnabled(false);


    }//GEN-LAST:event_onCancel

    private void onReset(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onReset
        reset();
    }//GEN-LAST:event_onReset

    private void onToggleShowAll(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onToggleShowAll
        updateVarTab();
    }//GEN-LAST:event_onToggleShowAll

    private void onVarNamesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_onVarNamesValueChanged
        int index = varNames.getSelectedIndex();
        if (index > -1) {
            String varName = varNames.getModel().getElementAt(index);
            Object varValue = runtime.binding(varName);
            if (varValue instanceof JsonNode) {
                varValue = prettyPrint((JsonNode) varValue);
            }
            variableBinding.setText(varValue == null ? null : varValue.toString());
        }
    }//GEN-LAST:event_onVarNamesValueChanged

    // TODO: use preferences and restore to previous text.
    public String scriptTemplate() {
        String script = prefs.get(SCRIPT_SOURCE_PREFERENCE_KEY, null);
        if (script != null)
            return script;
        try (InputStream is = this.getClass().getResourceAsStream("newScript.json")) { //NOI18N
            StringBuilder b = new StringBuilder();
            Reader r = new InputStreamReader(is);
            for (int c = r.read(); c >= 0; c = r.read()) {
                b.append((char) c);
            }
            return b.toString();
        } catch (IOException | NullPointerException e) {
            return "{\n}"; //NOI18N
        }
    }

    void addHandlers() {
        jsonSourceTextArea.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void removeUpdate(DocumentEvent e) {
                onSourceChange();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                onSourceChange();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                onSourceChange();
            }
        });

        InputMap im = jsonSourceTextArea.getInputMap(JComponent.WHEN_FOCUSED);
        ActionMap am = jsonSourceTextArea.getActionMap();

        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_Z, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()), "Undo");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_Y, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()), "Redo");

        am.put("Undo", new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {

                try {
                    if (undoManager.canUndo()) {
                        undoManager.undo();
                    }
                } catch (CannotUndoException exp) {
                    exp.printStackTrace(System.err);
                }
            }
        });
        am.put("Redo", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    if (undoManager.canRedo()) {
                        undoManager.redo();
                    }
                } catch (CannotUndoException exp) {
                    exp.printStackTrace(System.err);
                }
            }
        });

        try {
            jsonSourceTextArea.getDocument().insertString(0, scriptTemplate(), null);
        } catch (BadLocationException ex) {
            Logger.getLogger(UnRAVLFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        clearJsonError();
    }

    private boolean onSourceChange() {
        if (highlightTag != null) {
            jsonSourceTextArea.getHighlighter().removeHighlight(highlightTag);
        }
        try {
            setStatusText(""); //NOI18N
            Document d = jsonSourceTextArea.getDocument();
            String s = d.getText(0, d.getEndPosition().getOffset());
            prefs.put(SCRIPT_SOURCE_PREFERENCE_KEY, s);
            return validateJson(s);

        } catch (BadLocationException ex) {
            Logger.getLogger(UnRAVLFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }

    /**
     * @param args the command line arguments
     * @return the JFrame that is created
     */
    public static JFrame main(String args[]) {

        final UnRAVLFrame f = new UnRAVLFrame();

        /* Create and display the form */
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                f.clearJsonError();
                f.addHandlers();
                f.setVisible(true);
            }
        });
        return f;
    }

    private JsonNode unravlScript = null;
    private final ObjectMapper mapper = new ObjectMapper();

    public boolean validateJson(String json) {
        try {
            unravlScript = null;
            unravlScript = mapper.readTree(json);
            clearJsonError();
            return true;
        } catch (JsonProcessingException e) {
            JsonLocation l = e.getLocation();
            Integer line = null, col = null;
            if (l != null) {
                line = l.getLineNr();
                col = l.getColumnNr();
            }
            jsonError(line, col, e.getMessage());
        } catch (IOException e) {
            jsonError(null, null, e.getMessage());
        }
        return false;
    }

    void setStatusText(final String message) {

        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                status.setText(message);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jsonSourceTextArea;
    private javax.swing.JButton jumpToError;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JLabel position;
    private javax.swing.JButton reset;
    private javax.swing.JButton run;
    private javax.swing.JCheckBox showAll;
    private javax.swing.JPanel sourcePanel;
    private javax.swing.JLabel status;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTextField varName;
    private javax.swing.JList<String> varNames;
    private javax.swing.JPanel varPanel;
    private javax.swing.JTextArea variableBinding;
    // End of variables declaration//GEN-END:variables

    Highlighter.HighlightPainter painter;
    private Object highlightTag = null;

    public void clearJsonError() {
        run.setEnabled(true);
        jumpToError.setEnabled(false);
    }

    int errLine = 0;
    int errCol = 0;

    void jsonError(Integer line, Integer col, String message) {
        String prefix = ""; //NOI18N
        run.setEnabled(false);
        if (line != null && col != null) {
            try {

                jumpToError.setEnabled(true);
                prefix = "[" + line + "," + col + "] "; //NOI18N //NOI18N //NOI18N //NOI18N //NOI18N
                errLine = line - 1;
                errCol = col - 1;
                int startIndex = jsonSourceTextArea.getLineStartOffset(line - 1);
                int endIndex = jsonSourceTextArea.getLineEndOffset(line - 1);

                painter = new DefaultHighlighter.DefaultHighlightPainter(Color.ORANGE);
                highlightTag = jsonSourceTextArea.getHighlighter().addHighlight(startIndex, endIndex, painter);

            } catch (BadLocationException ex) {
                Logger.getLogger(UnRAVLFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
        setStatusText(prefix + message);
    }

    LinkedHashMap<String, Object> changedVars = new LinkedHashMap<String, Object>();

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        Object source = evt.getSource();
        if (source == runtime) {
            String name = evt.getPropertyName();
            changedVars.put(name, evt.getNewValue());
        }
    }

    private void updateVarTab() {
        if (runtime == null) {
            return;
        }
        String match = varName.getText();
        if (match.trim().length() == 0) {
            match = null;
        }
        Map<String, Object> varMap;
        if (showAll.isSelected()) {
            varMap = runtime.getBindings();
        } else {
            varMap = changedVars;
        }
        Object[] listData = varMap.keySet().toArray();
        ArrayList<String> names = new ArrayList<String>(listData.length);
        for (int i = 0; i < listData.length; i++) {
            String name = listData[i].toString();
            if (match == null || name.contains(match)) {
                names.add(name);
            }
        }
        final String[] namesArray = names.toArray(new String[names.size()]);
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                varNames.setListData(namesArray);

            }
        });
    }

    private Object prettyPrint(JsonNode node) {
        try {
            return mapper.writerWithDefaultPrettyPrinter().writeValueAsString(node);
        } catch (JsonProcessingException ex) {
            return node.toString();
        }
    }
}

/**
 * An OutputStream that writes to a JTextArea
 */
class TextAreaOutputStream extends OutputStream {

    private final JTextArea textArea;

    public TextAreaOutputStream(JTextArea textArea) {
        this.textArea = textArea;
    }

    // This won't handle Unicode
    @Override
    public void write(int byt) throws IOException {
        textArea.append(String.valueOf((char) byt));
        textArea.setCaretPosition(textArea.getDocument().getLength());
    }
}
